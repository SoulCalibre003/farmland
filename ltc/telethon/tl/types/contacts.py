"""File generated by TLObjects' generator. All changes will be ERASED"""
from ...tl.tlobject import TLObject
from typing import Optional, List, Union, TYPE_CHECKING
import os
import struct
if TYPE_CHECKING:
    from ...tl.types import TypeContactLink, TypeImportedContact, TypePopularContact, TypeChat, TypePeer, TypeTopPeerCategoryPeers, TypeUser, TypeContactBlocked, TypeContact



class Blocked(TLObject):
    CONSTRUCTOR_ID = 0x1c138d15
    SUBCLASS_OF_ID = 0xffba4f4f

    def __init__(self, blocked, users):
        """
        :param List[TypeContactBlocked] blocked:
        :param List[TypeUser] users:

        Constructor for contacts.Blocked: Instance of either Blocked, BlockedSlice.
        """
        self.blocked = blocked  # type: List[TypeContactBlocked]
        self.users = users  # type: List[TypeUser]

    def to_dict(self):
        return {
            '_': 'Blocked',
            'blocked': [] if self.blocked is None else [None if x is None else x.to_dict() for x in self.blocked],
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users]
        }

    def __bytes__(self):
        return b''.join((
            b'\x15\x8d\x13\x1c',
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.blocked)),b''.join(bytes(x) for x in self.blocked),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(bytes(x) for x in self.users),
        ))

    @classmethod
    def from_reader(cls, reader):
        reader.read_int()
        _blocked = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _blocked.append(_x)

        reader.read_int()
        _users = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _users.append(_x)

        return cls(blocked=_blocked, users=_users)


class BlockedSlice(TLObject):
    CONSTRUCTOR_ID = 0x900802a1
    SUBCLASS_OF_ID = 0xffba4f4f

    def __init__(self, count, blocked, users):
        """
        :param int count:
        :param List[TypeContactBlocked] blocked:
        :param List[TypeUser] users:

        Constructor for contacts.Blocked: Instance of either Blocked, BlockedSlice.
        """
        self.count = count  # type: int
        self.blocked = blocked  # type: List[TypeContactBlocked]
        self.users = users  # type: List[TypeUser]

    def to_dict(self):
        return {
            '_': 'BlockedSlice',
            'count': self.count,
            'blocked': [] if self.blocked is None else [None if x is None else x.to_dict() for x in self.blocked],
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users]
        }

    def __bytes__(self):
        return b''.join((
            b'\xa1\x02\x08\x90',
            struct.pack('<i', self.count),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.blocked)),b''.join(bytes(x) for x in self.blocked),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(bytes(x) for x in self.users),
        ))

    @classmethod
    def from_reader(cls, reader):
        _count = reader.read_int()
        reader.read_int()
        _blocked = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _blocked.append(_x)

        reader.read_int()
        _users = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _users.append(_x)

        return cls(count=_count, blocked=_blocked, users=_users)


class Contacts(TLObject):
    CONSTRUCTOR_ID = 0xeae87e42
    SUBCLASS_OF_ID = 0x38be25f6

    def __init__(self, contacts, saved_count, users):
        """
        :param List[TypeContact] contacts:
        :param int saved_count:
        :param List[TypeUser] users:

        Constructor for contacts.Contacts: Instance of either ContactsNotModified, Contacts.
        """
        self.contacts = contacts  # type: List[TypeContact]
        self.saved_count = saved_count  # type: int
        self.users = users  # type: List[TypeUser]

    def to_dict(self):
        return {
            '_': 'Contacts',
            'contacts': [] if self.contacts is None else [None if x is None else x.to_dict() for x in self.contacts],
            'saved_count': self.saved_count,
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users]
        }

    def __bytes__(self):
        return b''.join((
            b'B~\xe8\xea',
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.contacts)),b''.join(bytes(x) for x in self.contacts),
            struct.pack('<i', self.saved_count),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(bytes(x) for x in self.users),
        ))

    @classmethod
    def from_reader(cls, reader):
        reader.read_int()
        _contacts = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _contacts.append(_x)

        _saved_count = reader.read_int()
        reader.read_int()
        _users = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _users.append(_x)

        return cls(contacts=_contacts, saved_count=_saved_count, users=_users)


class ContactsNotModified(TLObject):
    CONSTRUCTOR_ID = 0xb74ba9d2
    SUBCLASS_OF_ID = 0x38be25f6

    def to_dict(self):
        return {
            '_': 'ContactsNotModified'
        }

    def __bytes__(self):
        return b''.join((
            b'\xd2\xa9K\xb7',
        ))

    @classmethod
    def from_reader(cls, reader):
        return cls()


class Found(TLObject):
    CONSTRUCTOR_ID = 0xb3134d9d
    SUBCLASS_OF_ID = 0x4386a2e3

    def __init__(self, my_results, results, chats, users):
        """
        :param List[TypePeer] my_results:
        :param List[TypePeer] results:
        :param List[TypeChat] chats:
        :param List[TypeUser] users:

        Constructor for contacts.Found: Instance of Found.
        """
        self.my_results = my_results  # type: List[TypePeer]
        self.results = results  # type: List[TypePeer]
        self.chats = chats  # type: List[TypeChat]
        self.users = users  # type: List[TypeUser]

    def to_dict(self):
        return {
            '_': 'Found',
            'my_results': [] if self.my_results is None else [None if x is None else x.to_dict() for x in self.my_results],
            'results': [] if self.results is None else [None if x is None else x.to_dict() for x in self.results],
            'chats': [] if self.chats is None else [None if x is None else x.to_dict() for x in self.chats],
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users]
        }

    def __bytes__(self):
        return b''.join((
            b'\x9dM\x13\xb3',
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.my_results)),b''.join(bytes(x) for x in self.my_results),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.results)),b''.join(bytes(x) for x in self.results),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.chats)),b''.join(bytes(x) for x in self.chats),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(bytes(x) for x in self.users),
        ))

    @classmethod
    def from_reader(cls, reader):
        reader.read_int()
        _my_results = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _my_results.append(_x)

        reader.read_int()
        _results = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _results.append(_x)

        reader.read_int()
        _chats = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _chats.append(_x)

        reader.read_int()
        _users = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _users.append(_x)

        return cls(my_results=_my_results, results=_results, chats=_chats, users=_users)


class ImportedContacts(TLObject):
    CONSTRUCTOR_ID = 0x77d01c3b
    SUBCLASS_OF_ID = 0x8172ad93

    def __init__(self, imported, popular_invites, retry_contacts, users):
        """
        :param List[TypeImportedContact] imported:
        :param List[TypePopularContact] popular_invites:
        :param List[int] retry_contacts:
        :param List[TypeUser] users:

        Constructor for contacts.ImportedContacts: Instance of ImportedContacts.
        """
        self.imported = imported  # type: List[TypeImportedContact]
        self.popular_invites = popular_invites  # type: List[TypePopularContact]
        self.retry_contacts = retry_contacts  # type: List[int]
        self.users = users  # type: List[TypeUser]

    def to_dict(self):
        return {
            '_': 'ImportedContacts',
            'imported': [] if self.imported is None else [None if x is None else x.to_dict() for x in self.imported],
            'popular_invites': [] if self.popular_invites is None else [None if x is None else x.to_dict() for x in self.popular_invites],
            'retry_contacts': [] if self.retry_contacts is None else self.retry_contacts[:],
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users]
        }

    def __bytes__(self):
        return b''.join((
            b';\x1c\xd0w',
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.imported)),b''.join(bytes(x) for x in self.imported),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.popular_invites)),b''.join(bytes(x) for x in self.popular_invites),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.retry_contacts)),b''.join(struct.pack('<q', x) for x in self.retry_contacts),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(bytes(x) for x in self.users),
        ))

    @classmethod
    def from_reader(cls, reader):
        reader.read_int()
        _imported = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _imported.append(_x)

        reader.read_int()
        _popular_invites = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _popular_invites.append(_x)

        reader.read_int()
        _retry_contacts = []
        for _ in range(reader.read_int()):
            _x = reader.read_long()
            _retry_contacts.append(_x)

        reader.read_int()
        _users = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _users.append(_x)

        return cls(imported=_imported, popular_invites=_popular_invites, retry_contacts=_retry_contacts, users=_users)


class Link(TLObject):
    CONSTRUCTOR_ID = 0x3ace484c
    SUBCLASS_OF_ID = 0x524d5ae9

    def __init__(self, my_link, foreign_link, user):
        """
        :param TypeContactLink my_link:
        :param TypeContactLink foreign_link:
        :param TypeUser user:

        Constructor for contacts.Link: Instance of Link.
        """
        self.my_link = my_link  # type: TypeContactLink
        self.foreign_link = foreign_link  # type: TypeContactLink
        self.user = user  # type: TypeUser

    def to_dict(self):
        return {
            '_': 'Link',
            'my_link': None if self.my_link is None else self.my_link.to_dict(),
            'foreign_link': None if self.foreign_link is None else self.foreign_link.to_dict(),
            'user': None if self.user is None else self.user.to_dict()
        }

    def __bytes__(self):
        return b''.join((
            b'LH\xce:',
            bytes(self.my_link),
            bytes(self.foreign_link),
            bytes(self.user),
        ))

    @classmethod
    def from_reader(cls, reader):
        _my_link = reader.tgread_object()
        _foreign_link = reader.tgread_object()
        _user = reader.tgread_object()
        return cls(my_link=_my_link, foreign_link=_foreign_link, user=_user)


class ResolvedPeer(TLObject):
    CONSTRUCTOR_ID = 0x7f077ad9
    SUBCLASS_OF_ID = 0xf065b3a8

    def __init__(self, peer, chats, users):
        """
        :param TypePeer peer:
        :param List[TypeChat] chats:
        :param List[TypeUser] users:

        Constructor for contacts.ResolvedPeer: Instance of ResolvedPeer.
        """
        self.peer = peer  # type: TypePeer
        self.chats = chats  # type: List[TypeChat]
        self.users = users  # type: List[TypeUser]

    def to_dict(self):
        return {
            '_': 'ResolvedPeer',
            'peer': None if self.peer is None else self.peer.to_dict(),
            'chats': [] if self.chats is None else [None if x is None else x.to_dict() for x in self.chats],
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users]
        }

    def __bytes__(self):
        return b''.join((
            b'\xd9z\x07\x7f',
            bytes(self.peer),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.chats)),b''.join(bytes(x) for x in self.chats),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(bytes(x) for x in self.users),
        ))

    @classmethod
    def from_reader(cls, reader):
        _peer = reader.tgread_object()
        reader.read_int()
        _chats = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _chats.append(_x)

        reader.read_int()
        _users = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _users.append(_x)

        return cls(peer=_peer, chats=_chats, users=_users)


class TopPeers(TLObject):
    CONSTRUCTOR_ID = 0x70b772a8
    SUBCLASS_OF_ID = 0x9ee8bb88

    def __init__(self, categories, chats, users):
        """
        :param List[TypeTopPeerCategoryPeers] categories:
        :param List[TypeChat] chats:
        :param List[TypeUser] users:

        Constructor for contacts.TopPeers: Instance of either TopPeersNotModified, TopPeers, TopPeersDisabled.
        """
        self.categories = categories  # type: List[TypeTopPeerCategoryPeers]
        self.chats = chats  # type: List[TypeChat]
        self.users = users  # type: List[TypeUser]

    def to_dict(self):
        return {
            '_': 'TopPeers',
            'categories': [] if self.categories is None else [None if x is None else x.to_dict() for x in self.categories],
            'chats': [] if self.chats is None else [None if x is None else x.to_dict() for x in self.chats],
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users]
        }

    def __bytes__(self):
        return b''.join((
            b'\xa8r\xb7p',
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.categories)),b''.join(bytes(x) for x in self.categories),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.chats)),b''.join(bytes(x) for x in self.chats),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(bytes(x) for x in self.users),
        ))

    @classmethod
    def from_reader(cls, reader):
        reader.read_int()
        _categories = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _categories.append(_x)

        reader.read_int()
        _chats = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _chats.append(_x)

        reader.read_int()
        _users = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _users.append(_x)

        return cls(categories=_categories, chats=_chats, users=_users)


class TopPeersDisabled(TLObject):
    CONSTRUCTOR_ID = 0xb52c939d
    SUBCLASS_OF_ID = 0x9ee8bb88

    def to_dict(self):
        return {
            '_': 'TopPeersDisabled'
        }

    def __bytes__(self):
        return b''.join((
            b'\x9d\x93,\xb5',
        ))

    @classmethod
    def from_reader(cls, reader):
        return cls()


class TopPeersNotModified(TLObject):
    CONSTRUCTOR_ID = 0xde266ef5
    SUBCLASS_OF_ID = 0x9ee8bb88

    def to_dict(self):
        return {
            '_': 'TopPeersNotModified'
        }

    def __bytes__(self):
        return b''.join((
            b'\xf5n&\xde',
        ))

    @classmethod
    def from_reader(cls, reader):
        return cls()

